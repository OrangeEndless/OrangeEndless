<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <!--View Model Property-->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM Sidekick View Model Property</Title>
      <Shortcut>propvm</Shortcut>
      <Description>Property of View Model for WPF &amp; Silverlight MVVM </Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Property Type</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property Name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>
      
      </Declarations>
      <Code Language="csharp">
                  <![CDATA[        public $type$ $property$
        {
            get { return _$property$Locator(this).Value; }
            set { _$property$Locator(this).SetValueAndTryNotify(value); }
        }
        #region Property $type$ $property$ Setup        
        protected Property<$type$> _$property$ = new Property<$type$>{ LocatorFunc = _$property$Locator};
        static Func<BindableBase,ValueContainer<$type$>> _$property$Locator= RegisterContainerLocator<$type$>("$property$", model =>model.Initialize("$property$",ref model._$property$, ref _$property$Locator,_$property$DefaultValueFactory));         
        static Func<$type$> _$property$DefaultValueFactory = ()=>{ return default($type$); };
        #endregion
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM Sidekick View Model Property with complex value factory</Title>
      <Shortcut>propcvm</Shortcut>
      <Description>Property of View Model for WPF &amp; Silverlight MVVM </Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Property Type</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property Name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>

      </Declarations>
      <Code Language="csharp">
        <![CDATA[        public $type$ $property$
        {
            get { return _$property$Locator(this).Value; }
            set { _$property$Locator(this).SetValueAndTryNotify(value); }
        }
        #region Property $type$ $property$ Setup        
        protected Property<$type$> _$property$ = new Property<$type$>{ LocatorFunc = _$property$Locator};
        static Func<BindableBase,ValueContainer<$type$>> _$property$Locator= RegisterContainerLocator<$type$>("$property$", model =>model.Initialize("$property$",ref model._$property$, ref _$property$Locator,_$property$DefaultValueFactory));         
        static Func<BindableBase,$type$> _$property$DefaultValueFactory = 
            model=>
            { 
                var vm = CastToCurrentType(model);
                //TODO: Add the logic that produce default value from vm current status.
                return default($type$); 
            };
        #endregion
]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  
  <!--View Model Class-->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM Sidekick View Model Class</Title>
      <Shortcut>classvm</Shortcut>
      <Description>View Model for WPF &amp; Silverlight MVVM </Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>class</ID>
          <ToolTip>View Model Class Name</ToolTip>
          <Default>SomeViewModel</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
    //[DataContract(IsReference=true) ] //if you want
    public class $class$ : ViewModelBase<$class$> 
    {
        public $class$()
        {
            // Use propery to init value here:
            if (IsInDesignMode)
            { 
                //Add design time demo data init here. These will not execute in runtime.
            }
            
            
        }

        //Use propvm + tab +tab  to create a new property of vm here:
        //Use propcmd + tab +tab  to create a new command of vm here:
           

    }
     
        
        
        
]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <!--Bindable Class-->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM Sidekick Bindable Class</Title>
      <Shortcut>classvm</Shortcut>
      <Description>Bindable type for WPF &amp; Silverlight MVVM </Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>class</ID>
          <ToolTip>Bindable Class Name</ToolTip>
          <Default>SomeBindable</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
    //[DataContract(IsReference=true) ] //if you want
    public class $class$ : BindableBase<$class$> 
    {
        public $class$()
        {
            // Use propery to init value here:
            if (IsInDesignMode)
            { 
                //Add design time demo data init here. These will not execute in runtime.
            }
            
            
        }

        //Use propvm + tab +tab  to create a new property of bindable here:
           

    }
     
        
        
        
]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <!--View Model Command With Resource-->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM Sidekick View Model Command With Resource</Title>
      <Shortcut>propcmd</Shortcut>
      <Description>Command Model of View Model for WPF &amp; Silverlight MVVM </Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>commandType</ID>
          <ToolTip>View Model Command Type</ToolTip>
          <Default>ReactiveCommand</Default>
        </Literal>
        <Literal>
          <ID>commandName</ID>
          <ToolTip>View Model Command Type</ToolTip>
          <Default>SomeCommand</Default>
        </Literal>
        <Literal>
          <ID>resourceType</ID>
          <ToolTip>View Model Class Name</ToolTip>
          <Default>String</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp" >
        <![CDATA[
        public CommandModel<$commandType$, $resourceType$> Command$commandName$
        {
            get { return _Command$commandName$Locator(this).Value; }
            set { _Command$commandName$Locator(this).SetValueAndTryNotify(value); }
        }
        #region Property CommandModel<$commandType$, $resourceType$> Command$commandName$ Setup        
        protected Property<CommandModel<$commandType$, $resourceType$>> _Command$commandName$ = new Property<CommandModel<$commandType$, $resourceType$>>{ LocatorFunc = _Command$commandName$Locator};
        static Func<BindableBase,ValueContainer<CommandModel<$commandType$, $resourceType$>>> _Command$commandName$Locator= RegisterContainerLocator<CommandModel<$commandType$, $resourceType$>>("Command$commandName$", model =>model.Initialize("Command$commandName$",ref model._Command$commandName$, ref _Command$commandName$Locator,_Command$commandName$DefaultValueFactory));         
        static Func<BindableBase,CommandModel<$commandType$, $resourceType$>> _Command$commandName$DefaultValueFactory =
            model => {
                var resource = "$commandName$";           // Command resource  
                var commandId = "$commandName$";
                var vm = CastToCurrentType(model);
                var cmd = new ReactiveCommand(canExecute: true) { ViewModel = model }; //New Command Core
                cmd
                    .DoExecuteUIBusyTask(
                        vm,
                        async e =>
                        {
                            //Todo: Add $commandName$ logic here, or
                            await MVVMSidekick.Utilities.TaskExHelper.Yield();
                        }
                    )
                    .DoNotifyDefaultEventRouter(vm, commandId)
                    .Subscribe()
                    .DisposeWith(vm);
                    
                var cmdmdl = cmd.CreateCommandModel(resource);
                cmdmdl.ListenToIsUIBusy(model: vm, canExecuteWhenBusy: false);
                return cmdmdl;
            };
        #endregion
]]>
      </Code>
    </Snippet>
  </CodeSnippet>







</CodeSnippets>
