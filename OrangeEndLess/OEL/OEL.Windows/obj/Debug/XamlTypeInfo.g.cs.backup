//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace OEL
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::OEL.OEL_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::OEL.OEL_Windows_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::OEL.OEL_Windows_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace OEL.OEL_Windows_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[27];
            _typeNameTable[0] = "MVVMSidekick.Views.MVVMPage";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[3] = "Object";
            _typeNameTable[4] = "MVVMSidekick.ViewModels.IViewModel";
            _typeNameTable[5] = "MVVMSidekick.Views.ViewType";
            _typeNameTable[6] = "System.Enum";
            _typeNameTable[7] = "System.ValueType";
            _typeNameTable[8] = "OEL.ViewModels.MainPage_Model";
            _typeNameTable[9] = "MVVMSidekick.ViewModels.ViewModelBase`1<OEL.ViewModels.MainPage_Model>";
            _typeNameTable[10] = "MVVMSidekick.ViewModels.BindableBase`1<OEL.ViewModels.MainPage_Model>";
            _typeNameTable[11] = "MVVMSidekick.ViewModels.BindableBase";
            _typeNameTable[12] = "MVVMSidekick.ViewModels.DisposeGroupBase";
            _typeNameTable[13] = "Boolean";
            _typeNameTable[14] = "MVVMSidekick.Views.StageManager";
            _typeNameTable[15] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[16] = "Windows.UI.Core.CoreDispatcher";
            _typeNameTable[17] = "String";
            _typeNameTable[18] = "MVVMSidekick.EventRouting.EventRouter";
            _typeNameTable[19] = "System.Collections.Generic.IList`1<MVVMSidekick.ViewModels.DisposeEntry>";
            _typeNameTable[20] = "MVVMSidekick.ViewModels.DisposeEntry";
            _typeNameTable[21] = "MVVMSidekick.Utilities.CallingCodeContext";
            _typeNameTable[22] = "System.Exception";
            _typeNameTable[23] = "System.Action";
            _typeNameTable[24] = "System.MulticastDelegate";
            _typeNameTable[25] = "System.Delegate";
            _typeNameTable[26] = "OEL.MainPage";

            _typeTable = new global::System.Type[27];
            _typeTable[0] = typeof(global::MVVMSidekick.Views.MVVMPage);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[3] = typeof(global::System.Object);
            _typeTable[4] = typeof(global::MVVMSidekick.ViewModels.IViewModel);
            _typeTable[5] = typeof(global::MVVMSidekick.Views.ViewType);
            _typeTable[6] = typeof(global::System.Enum);
            _typeTable[7] = typeof(global::System.ValueType);
            _typeTable[8] = typeof(global::OEL.ViewModels.MainPage_Model);
            _typeTable[9] = typeof(global::MVVMSidekick.ViewModels.ViewModelBase<global::OEL.ViewModels.MainPage_Model>);
            _typeTable[10] = typeof(global::MVVMSidekick.ViewModels.BindableBase<global::OEL.ViewModels.MainPage_Model>);
            _typeTable[11] = typeof(global::MVVMSidekick.ViewModels.BindableBase);
            _typeTable[12] = typeof(global::MVVMSidekick.ViewModels.DisposeGroupBase);
            _typeTable[13] = typeof(global::System.Boolean);
            _typeTable[14] = typeof(global::MVVMSidekick.Views.StageManager);
            _typeTable[15] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[16] = typeof(global::Windows.UI.Core.CoreDispatcher);
            _typeTable[17] = typeof(global::System.String);
            _typeTable[18] = typeof(global::MVVMSidekick.EventRouting.EventRouter);
            _typeTable[19] = typeof(global::System.Collections.Generic.IList<global::MVVMSidekick.ViewModels.DisposeEntry>);
            _typeTable[20] = typeof(global::MVVMSidekick.ViewModels.DisposeEntry);
            _typeTable[21] = typeof(global::MVVMSidekick.Utilities.CallingCodeContext);
            _typeTable[22] = typeof(global::System.Exception);
            _typeTable[23] = typeof(global::System.Action);
            _typeTable[24] = typeof(global::System.MulticastDelegate);
            _typeTable[25] = typeof(global::System.Delegate);
            _typeTable[26] = typeof(global::OEL.MainPage);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_MVVMPage() { return new global::MVVMSidekick.Views.MVVMPage(); }
        private object Activate_8_MainPage_Model() { return new global::OEL.ViewModels.MainPage_Model(); }
        private object Activate_18_EventRouter() { return new global::MVVMSidekick.EventRouting.EventRouter(); }
        private object Activate_22_Exception() { return new global::System.Exception(); }
        private object Activate_26_MainPage() { return new global::OEL.MainPage(); }
        private void VectorAdd_19_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MVVMSidekick.ViewModels.DisposeEntry>)instance;
            var newItem = (global::MVVMSidekick.ViewModels.DisposeEntry)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::OEL.OEL_Windows_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  MVVMSidekick.Views.MVVMPage
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_MVVMPage;
                userType.AddMemberName("ContentObject");
                userType.AddMemberName("ViewModel");
                userType.AddMemberName("ViewType");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Object
                xamlType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  MVVMSidekick.ViewModels.IViewModel
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 5:   //  MVVMSidekick.Views.ViewType
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Page", global::MVVMSidekick.Views.ViewType.Page);
                userType.AddEnumValue("Window", global::MVVMSidekick.Views.ViewType.Window);
                userType.AddEnumValue("Control", global::MVVMSidekick.Views.ViewType.Control);
                xamlType = userType;
                break;

            case 6:   //  System.Enum
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 7:   //  System.ValueType
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 8:   //  OEL.ViewModels.MainPage_Model
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MVVMSidekick.ViewModels.ViewModelBase`1<OEL.ViewModels.MainPage_Model>"));
                userType.Activator = Activate_8_MainPage_Model;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  MVVMSidekick.ViewModels.ViewModelBase`1<OEL.ViewModels.MainPage_Model>
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MVVMSidekick.ViewModels.BindableBase`1<OEL.ViewModels.MainPage_Model>"));
                userType.AddMemberName("IsDisposingWhenUnbindRequired");
                userType.AddMemberName("IsDisposingWhenUnloadRequired");
                userType.AddMemberName("StageManager");
                userType.AddMemberName("HaveReturnValue");
                userType.AddMemberName("IsUIBusy");
                userType.AddMemberName("Dispatcher");
                xamlType = userType;
                break;

            case 10:   //  MVVMSidekick.ViewModels.BindableBase`1<OEL.ViewModels.MainPage_Model>
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MVVMSidekick.ViewModels.BindableBase"));
                userType.AddMemberName("BindableInstanceId");
                userType.AddMemberName("Error");
                userType.AddMemberName("HasErrors");
                userType.AddMemberName("EventRouter");
                xamlType = userType;
                break;

            case 11:   //  MVVMSidekick.ViewModels.BindableBase
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MVVMSidekick.ViewModels.DisposeGroupBase"));
                userType.AddMemberName("IsValidationActivated");
                userType.AddMemberName("IsNotificationActivated");
                xamlType = userType;
                break;

            case 12:   //  MVVMSidekick.ViewModels.DisposeGroupBase
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("DisposeInfoList");
                xamlType = userType;
                break;

            case 13:   //  Boolean
                xamlType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  MVVMSidekick.Views.StageManager
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 15:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  Windows.UI.Core.CoreDispatcher
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  String
                xamlType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  MVVMSidekick.EventRouting.EventRouter
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  System.Collections.Generic.IList`1<MVVMSidekick.ViewModels.DisposeEntry>
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_19_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 20:   //  MVVMSidekick.ViewModels.DisposeEntry
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("CallingCodeContext");
                userType.AddMemberName("Exception");
                userType.AddMemberName("Action");
                xamlType = userType;
                break;

            case 21:   //  MVVMSidekick.Utilities.CallingCodeContext
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  System.Exception
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  System.Action
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.MulticastDelegate"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 24:   //  System.MulticastDelegate
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Delegate"));
                xamlType = userType;
                break;

            case 25:   //  System.Delegate
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 26:   //  OEL.MainPage
                userType = new global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MVVMSidekick.Views.MVVMPage"));
                userType.Activator = Activate_26_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_MVVMPage_ContentObject(object instance)
        {
            var that = (global::MVVMSidekick.Views.MVVMPage)instance;
            return that.ContentObject;
        }
        private void set_0_MVVMPage_ContentObject(object instance, object Value)
        {
            var that = (global::MVVMSidekick.Views.MVVMPage)instance;
            that.ContentObject = (global::System.Object)Value;
        }
        private object get_1_MVVMPage_ViewModel(object instance)
        {
            var that = (global::MVVMSidekick.Views.MVVMPage)instance;
            return that.ViewModel;
        }
        private void set_1_MVVMPage_ViewModel(object instance, object Value)
        {
            var that = (global::MVVMSidekick.Views.MVVMPage)instance;
            that.ViewModel = (global::MVVMSidekick.ViewModels.IViewModel)Value;
        }
        private object get_2_MVVMPage_ViewType(object instance)
        {
            var that = (global::MVVMSidekick.Views.MVVMPage)instance;
            return that.ViewType;
        }
        private object get_3_ViewModelBase_IsDisposingWhenUnbindRequired(object instance)
        {
            var that = (global::MVVMSidekick.ViewModels.ViewModelBase<global::OEL.ViewModels.MainPage_Model>)instance;
            return that.IsDisposingWhenUnbindRequired;
        }
        private object get_4_ViewModelBase_IsDisposingWhenUnloadRequired(object instance)
        {
            var that = (global::MVVMSidekick.ViewModels.ViewModelBase<global::OEL.ViewModels.MainPage_Model>)instance;
            return that.IsDisposingWhenUnloadRequired;
        }
        private object get_5_ViewModelBase_StageManager(object instance)
        {
            var that = (global::MVVMSidekick.ViewModels.ViewModelBase<global::OEL.ViewModels.MainPage_Model>)instance;
            return that.StageManager;
        }
        private void set_5_ViewModelBase_StageManager(object instance, object Value)
        {
            var that = (global::MVVMSidekick.ViewModels.ViewModelBase<global::OEL.ViewModels.MainPage_Model>)instance;
            that.StageManager = (global::MVVMSidekick.Views.StageManager)Value;
        }
        private object get_6_ViewModelBase_HaveReturnValue(object instance)
        {
            var that = (global::MVVMSidekick.ViewModels.ViewModelBase<global::OEL.ViewModels.MainPage_Model>)instance;
            return that.HaveReturnValue;
        }
        private object get_7_ViewModelBase_IsUIBusy(object instance)
        {
            var that = (global::MVVMSidekick.ViewModels.ViewModelBase<global::OEL.ViewModels.MainPage_Model>)instance;
            return that.IsUIBusy;
        }
        private void set_7_ViewModelBase_IsUIBusy(object instance, object Value)
        {
            var that = (global::MVVMSidekick.ViewModels.ViewModelBase<global::OEL.ViewModels.MainPage_Model>)instance;
            that.IsUIBusy = (global::System.Boolean)Value;
        }
        private object get_8_ViewModelBase_Dispatcher(object instance)
        {
            var that = (global::MVVMSidekick.ViewModels.ViewModelBase<global::OEL.ViewModels.MainPage_Model>)instance;
            return that.Dispatcher;
        }
        private object get_9_BindableBase_BindableInstanceId(object instance)
        {
            var that = (global::MVVMSidekick.ViewModels.BindableBase<global::OEL.ViewModels.MainPage_Model>)instance;
            return that.BindableInstanceId;
        }
        private object get_10_BindableBase_Error(object instance)
        {
            var that = (global::MVVMSidekick.ViewModels.BindableBase<global::OEL.ViewModels.MainPage_Model>)instance;
            return that.Error;
        }
        private object get_11_BindableBase_HasErrors(object instance)
        {
            var that = (global::MVVMSidekick.ViewModels.BindableBase<global::OEL.ViewModels.MainPage_Model>)instance;
            return that.HasErrors;
        }
        private object get_12_BindableBase_EventRouter(object instance)
        {
            var that = (global::MVVMSidekick.ViewModels.BindableBase<global::OEL.ViewModels.MainPage_Model>)instance;
            return that.EventRouter;
        }
        private void set_12_BindableBase_EventRouter(object instance, object Value)
        {
            var that = (global::MVVMSidekick.ViewModels.BindableBase<global::OEL.ViewModels.MainPage_Model>)instance;
            that.EventRouter = (global::MVVMSidekick.EventRouting.EventRouter)Value;
        }
        private object get_13_BindableBase_IsValidationActivated(object instance)
        {
            var that = (global::MVVMSidekick.ViewModels.BindableBase)instance;
            return that.IsValidationActivated;
        }
        private void set_13_BindableBase_IsValidationActivated(object instance, object Value)
        {
            var that = (global::MVVMSidekick.ViewModels.BindableBase)instance;
            that.IsValidationActivated = (global::System.Boolean)Value;
        }
        private object get_14_BindableBase_IsNotificationActivated(object instance)
        {
            var that = (global::MVVMSidekick.ViewModels.BindableBase)instance;
            return that.IsNotificationActivated;
        }
        private void set_14_BindableBase_IsNotificationActivated(object instance, object Value)
        {
            var that = (global::MVVMSidekick.ViewModels.BindableBase)instance;
            that.IsNotificationActivated = (global::System.Boolean)Value;
        }
        private object get_15_DisposeGroupBase_DisposeInfoList(object instance)
        {
            var that = (global::MVVMSidekick.ViewModels.DisposeGroupBase)instance;
            return that.DisposeInfoList;
        }
        private object get_16_DisposeEntry_CallingCodeContext(object instance)
        {
            var that = (global::MVVMSidekick.ViewModels.DisposeEntry)instance;
            return that.CallingCodeContext;
        }
        private void set_16_DisposeEntry_CallingCodeContext(object instance, object Value)
        {
            var that = (global::MVVMSidekick.ViewModels.DisposeEntry)instance;
            that.CallingCodeContext = (global::MVVMSidekick.Utilities.CallingCodeContext)Value;
        }
        private object get_17_DisposeEntry_Exception(object instance)
        {
            var that = (global::MVVMSidekick.ViewModels.DisposeEntry)instance;
            return that.Exception;
        }
        private void set_17_DisposeEntry_Exception(object instance, object Value)
        {
            var that = (global::MVVMSidekick.ViewModels.DisposeEntry)instance;
            that.Exception = (global::System.Exception)Value;
        }
        private object get_18_DisposeEntry_Action(object instance)
        {
            var that = (global::MVVMSidekick.ViewModels.DisposeEntry)instance;
            return that.Action;
        }
        private void set_18_DisposeEntry_Action(object instance, object Value)
        {
            var that = (global::MVVMSidekick.ViewModels.DisposeEntry)instance;
            that.Action = (global::System.Action)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::OEL.OEL_Windows_XamlTypeInfo.XamlMember xamlMember = null;
            global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "MVVMSidekick.Views.MVVMPage.ContentObject":
                userType = (global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MVVMSidekick.Views.MVVMPage");
                xamlMember = new global::OEL.OEL_Windows_XamlTypeInfo.XamlMember(this, "ContentObject", "Object");
                xamlMember.Getter = get_0_MVVMPage_ContentObject;
                xamlMember.Setter = set_0_MVVMPage_ContentObject;
                break;
            case "MVVMSidekick.Views.MVVMPage.ViewModel":
                userType = (global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MVVMSidekick.Views.MVVMPage");
                xamlMember = new global::OEL.OEL_Windows_XamlTypeInfo.XamlMember(this, "ViewModel", "MVVMSidekick.ViewModels.IViewModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_MVVMPage_ViewModel;
                xamlMember.Setter = set_1_MVVMPage_ViewModel;
                break;
            case "MVVMSidekick.Views.MVVMPage.ViewType":
                userType = (global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MVVMSidekick.Views.MVVMPage");
                xamlMember = new global::OEL.OEL_Windows_XamlTypeInfo.XamlMember(this, "ViewType", "MVVMSidekick.Views.ViewType");
                xamlMember.Getter = get_2_MVVMPage_ViewType;
                xamlMember.SetIsReadOnly();
                break;
            case "MVVMSidekick.ViewModels.ViewModelBase`1<OEL.ViewModels.MainPage_Model>.IsDisposingWhenUnbindRequired":
                userType = (global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MVVMSidekick.ViewModels.ViewModelBase`1<OEL.ViewModels.MainPage_Model>");
                xamlMember = new global::OEL.OEL_Windows_XamlTypeInfo.XamlMember(this, "IsDisposingWhenUnbindRequired", "Boolean");
                xamlMember.Getter = get_3_ViewModelBase_IsDisposingWhenUnbindRequired;
                xamlMember.SetIsReadOnly();
                break;
            case "MVVMSidekick.ViewModels.ViewModelBase`1<OEL.ViewModels.MainPage_Model>.IsDisposingWhenUnloadRequired":
                userType = (global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MVVMSidekick.ViewModels.ViewModelBase`1<OEL.ViewModels.MainPage_Model>");
                xamlMember = new global::OEL.OEL_Windows_XamlTypeInfo.XamlMember(this, "IsDisposingWhenUnloadRequired", "Boolean");
                xamlMember.Getter = get_4_ViewModelBase_IsDisposingWhenUnloadRequired;
                xamlMember.SetIsReadOnly();
                break;
            case "MVVMSidekick.ViewModels.ViewModelBase`1<OEL.ViewModels.MainPage_Model>.StageManager":
                userType = (global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MVVMSidekick.ViewModels.ViewModelBase`1<OEL.ViewModels.MainPage_Model>");
                xamlMember = new global::OEL.OEL_Windows_XamlTypeInfo.XamlMember(this, "StageManager", "MVVMSidekick.Views.StageManager");
                xamlMember.Getter = get_5_ViewModelBase_StageManager;
                xamlMember.Setter = set_5_ViewModelBase_StageManager;
                break;
            case "MVVMSidekick.ViewModels.ViewModelBase`1<OEL.ViewModels.MainPage_Model>.HaveReturnValue":
                userType = (global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MVVMSidekick.ViewModels.ViewModelBase`1<OEL.ViewModels.MainPage_Model>");
                xamlMember = new global::OEL.OEL_Windows_XamlTypeInfo.XamlMember(this, "HaveReturnValue", "Boolean");
                xamlMember.Getter = get_6_ViewModelBase_HaveReturnValue;
                xamlMember.SetIsReadOnly();
                break;
            case "MVVMSidekick.ViewModels.ViewModelBase`1<OEL.ViewModels.MainPage_Model>.IsUIBusy":
                userType = (global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MVVMSidekick.ViewModels.ViewModelBase`1<OEL.ViewModels.MainPage_Model>");
                xamlMember = new global::OEL.OEL_Windows_XamlTypeInfo.XamlMember(this, "IsUIBusy", "Boolean");
                xamlMember.Getter = get_7_ViewModelBase_IsUIBusy;
                xamlMember.Setter = set_7_ViewModelBase_IsUIBusy;
                break;
            case "MVVMSidekick.ViewModels.ViewModelBase`1<OEL.ViewModels.MainPage_Model>.Dispatcher":
                userType = (global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MVVMSidekick.ViewModels.ViewModelBase`1<OEL.ViewModels.MainPage_Model>");
                xamlMember = new global::OEL.OEL_Windows_XamlTypeInfo.XamlMember(this, "Dispatcher", "Windows.UI.Core.CoreDispatcher");
                xamlMember.Getter = get_8_ViewModelBase_Dispatcher;
                xamlMember.SetIsReadOnly();
                break;
            case "MVVMSidekick.ViewModels.BindableBase`1<OEL.ViewModels.MainPage_Model>.BindableInstanceId":
                userType = (global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MVVMSidekick.ViewModels.BindableBase`1<OEL.ViewModels.MainPage_Model>");
                xamlMember = new global::OEL.OEL_Windows_XamlTypeInfo.XamlMember(this, "BindableInstanceId", "String");
                xamlMember.Getter = get_9_BindableBase_BindableInstanceId;
                xamlMember.SetIsReadOnly();
                break;
            case "MVVMSidekick.ViewModels.BindableBase`1<OEL.ViewModels.MainPage_Model>.Error":
                userType = (global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MVVMSidekick.ViewModels.BindableBase`1<OEL.ViewModels.MainPage_Model>");
                xamlMember = new global::OEL.OEL_Windows_XamlTypeInfo.XamlMember(this, "Error", "String");
                xamlMember.Getter = get_10_BindableBase_Error;
                xamlMember.SetIsReadOnly();
                break;
            case "MVVMSidekick.ViewModels.BindableBase`1<OEL.ViewModels.MainPage_Model>.HasErrors":
                userType = (global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MVVMSidekick.ViewModels.BindableBase`1<OEL.ViewModels.MainPage_Model>");
                xamlMember = new global::OEL.OEL_Windows_XamlTypeInfo.XamlMember(this, "HasErrors", "Boolean");
                xamlMember.Getter = get_11_BindableBase_HasErrors;
                xamlMember.SetIsReadOnly();
                break;
            case "MVVMSidekick.ViewModels.BindableBase`1<OEL.ViewModels.MainPage_Model>.EventRouter":
                userType = (global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MVVMSidekick.ViewModels.BindableBase`1<OEL.ViewModels.MainPage_Model>");
                xamlMember = new global::OEL.OEL_Windows_XamlTypeInfo.XamlMember(this, "EventRouter", "MVVMSidekick.EventRouting.EventRouter");
                xamlMember.Getter = get_12_BindableBase_EventRouter;
                xamlMember.Setter = set_12_BindableBase_EventRouter;
                break;
            case "MVVMSidekick.ViewModels.BindableBase.IsValidationActivated":
                userType = (global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MVVMSidekick.ViewModels.BindableBase");
                xamlMember = new global::OEL.OEL_Windows_XamlTypeInfo.XamlMember(this, "IsValidationActivated", "Boolean");
                xamlMember.Getter = get_13_BindableBase_IsValidationActivated;
                xamlMember.Setter = set_13_BindableBase_IsValidationActivated;
                break;
            case "MVVMSidekick.ViewModels.BindableBase.IsNotificationActivated":
                userType = (global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MVVMSidekick.ViewModels.BindableBase");
                xamlMember = new global::OEL.OEL_Windows_XamlTypeInfo.XamlMember(this, "IsNotificationActivated", "Boolean");
                xamlMember.Getter = get_14_BindableBase_IsNotificationActivated;
                xamlMember.Setter = set_14_BindableBase_IsNotificationActivated;
                break;
            case "MVVMSidekick.ViewModels.DisposeGroupBase.DisposeInfoList":
                userType = (global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MVVMSidekick.ViewModels.DisposeGroupBase");
                xamlMember = new global::OEL.OEL_Windows_XamlTypeInfo.XamlMember(this, "DisposeInfoList", "System.Collections.Generic.IList`1<MVVMSidekick.ViewModels.DisposeEntry>");
                xamlMember.Getter = get_15_DisposeGroupBase_DisposeInfoList;
                xamlMember.SetIsReadOnly();
                break;
            case "MVVMSidekick.ViewModels.DisposeEntry.CallingCodeContext":
                userType = (global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MVVMSidekick.ViewModels.DisposeEntry");
                xamlMember = new global::OEL.OEL_Windows_XamlTypeInfo.XamlMember(this, "CallingCodeContext", "MVVMSidekick.Utilities.CallingCodeContext");
                xamlMember.Getter = get_16_DisposeEntry_CallingCodeContext;
                xamlMember.Setter = set_16_DisposeEntry_CallingCodeContext;
                break;
            case "MVVMSidekick.ViewModels.DisposeEntry.Exception":
                userType = (global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MVVMSidekick.ViewModels.DisposeEntry");
                xamlMember = new global::OEL.OEL_Windows_XamlTypeInfo.XamlMember(this, "Exception", "System.Exception");
                xamlMember.Getter = get_17_DisposeEntry_Exception;
                xamlMember.Setter = set_17_DisposeEntry_Exception;
                break;
            case "MVVMSidekick.ViewModels.DisposeEntry.Action":
                userType = (global::OEL.OEL_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MVVMSidekick.ViewModels.DisposeEntry");
                xamlMember = new global::OEL.OEL_Windows_XamlTypeInfo.XamlMember(this, "Action", "System.Action");
                xamlMember.Getter = get_18_DisposeEntry_Action;
                xamlMember.Setter = set_18_DisposeEntry_Action;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::OEL.OEL_Windows_XamlTypeInfo.XamlSystemBaseType
    {
        global::OEL.OEL_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::OEL.OEL_Windows_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::OEL.OEL_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::OEL.OEL_Windows_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


