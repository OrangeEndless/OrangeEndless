<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MVVMSidekick_Metro</name>
    </assembly>
    <members>
        <member name="T:MVVMSidekick.Collections.ObservableVector`1">
            <summary>
            ObservableVector that raises events for IObservableCollection and IObservableVector
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "T:MVVMSidekick.Collections.VectorChangedEventArgs" -->
        <member name="P:MVVMSidekick.Collections.VectorChangedEventArgs.CollectionChange">
            <summary>
            Describes the change that caused the change
            </summary>
        </member>
        <member name="P:MVVMSidekick.Collections.VectorChangedEventArgs.Index">
            <summary>
            The index of the item changed
            </summary>
        </member>
        <member name="T:MVVMSidekick.Collections.CollectionExtensions">
            <summary>
            <para > The extension method for collections </para>
            <para>集合类型的扩展方法</para>
            </summary>
        </member>
        <member name="M:MVVMSidekick.Collections.CollectionExtensions.ToKeyedObserableCollection``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            <para>Transform to a dictionary with INotifyCollectionChanged</para>
            <para>生成一个带有集合变化通知的字典</para>
            </summary>
            <typeparam name="K"><para>Key Type</para><para>键类型</para></typeparam>
            <typeparam name="V"><para>Value Type</para><para>值类型</para></typeparam>
            <param name="items"><para>Source Dictionary</para><para>来源字典</para><para></para></param>
            <returns></returns>
        </member>
        <member name="T:MVVMSidekick.Collections.CollectionView.CollectionView`1">
            <summary>
            <para>ICollectionView generic implmention</para>
            <para>ICollectionView 的泛型实现</para>
            </summary>
            <typeparam name="T"><para>Content Type</para><para>内容类型</para> </typeparam>
        </member>
        <member name="M:MVVMSidekick.Collections.CollectionView.CollectionView`1.#ctor(System.Collections.Generic.IEnumerable{`0},MVVMSidekick.Collections.CollectionView.CollectionViewIncrementalLoader{`0})">
            <summary>
            <para>Constructor of Collection View</para>
            <para>构造函数</para>
            </summary>
            <param name="items"><para>Initialing Items</para><para>初始内容集合</para></param>
            <param name="loader"><para>increanatal loader</para><para>自增加载器</para></param>
        </member>
        <member name="M:MVVMSidekick.Collections.CollectionView.CollectionView`1.#ctor(System.Collections.Generic.IEnumerable{`0},MVVMSidekick.Collections.CollectionView.CollectionViewGroupCollection{`0})">
            <summary>
            <para>Constructor of Collection View</para>
            <para>构造函数</para>
            </summary>
            <param name="items"><para>Initialing Items</para><para>初始内容集合</para></param>
            <param name="groupCollection"><para>Initaling Groups</para><para>初始分组</para></param>
        </member>
        <member name="M:MVVMSidekick.Collections.CollectionView.CollectionView`1.InsertItem(System.Int32,`0)">
            <summary>
            <para>Insert Item</para><para>插入</para>
            </summary>
            <param name="index"><para>targeting index</para><para>目标索引</para></param>
            <param name="item"><para> Item inserting</para><para>插入项</para></param>
        </member>
        <member name="M:MVVMSidekick.Collections.CollectionView.CollectionView`1.ClearItems">
            <summary>
            <para>Clear Items</para>
            <para>清除内容</para>
            </summary>
        </member>
        <member name="F:MVVMSidekick.Collections.CollectionView.CollectionView`1._loader">
            <summary>
            <para>Incremental Loader</para>
            <para>自增读取器</para>
            </summary>
        </member>
        <member name="M:MVVMSidekick.Collections.CollectionView.CollectionView`1.LoadMoreItemsAsync(System.UInt32)">
            <summary>
            <para>Load More Items</para><para>加载更多的项</para>
            </summary>
            <param name="count"><para>count of items</para><para>个数</para></param>
            <returns></returns>
        </member>
        <member name="P:MVVMSidekick.Collections.CollectionView.CollectionView`1.CollectionGroups">
            <summary>
            <para>Collection Groups</para>
            <para>集合中的分组</para>
            </summary>
        </member>
        <member name="E:MVVMSidekick.Collections.CollectionView.CollectionView`1.CurrentChanged">
            <summary>
            <para>Fired when current Item has changed</para>
            <para>当前项变化后触发</para>
            </summary>
        </member>
        <member name="E:MVVMSidekick.Collections.CollectionView.CollectionView`1.CurrentChanging">
            <summary>
            <para>Fired when current Item is changing</para>
            <para>当前项变化前触发</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:MVVMSidekick.Collections.CollectionView.CollectionView`1.CurrentItem" -->
        <member name="P:MVVMSidekick.Collections.CollectionView.CollectionView`1.CurrentPosition">
            <summary>
            <para>Current Item Index</para><para>当前项的索引</para>
            </summary>
        </member>
        <member name="P:MVVMSidekick.Collections.CollectionView.CollectionView`1.HasMoreItems">
            <summary>
            <para>Has more items can loaded by loader</para><para>是否还有更多的数据</para>
            </summary>
        </member>
        <member name="P:MVVMSidekick.Collections.CollectionView.CollectionView`1.IsCurrentAfterLast">
            <summary>
            <para>Is Current Item is beyond  bound of collection</para><para>当前项目是否已经超出集合最大范围</para>
            </summary>
        </member>
        <member name="P:MVVMSidekick.Collections.CollectionView.CollectionView`1.IsCurrentBeforeFirst">
            <summary>
            <para>Is Current Item is before  bound of collection</para><para>当前项目是否已经在集合之前</para>
            </summary>
        </member>
        <member name="T:MVVMSidekick.Commands.EventCommandEventArgs">
            <summary>
            Command被运行触发的事件数据类型
            </summary>
        </member>
        <member name="T:MVVMSidekick.Commands.EventCommandHelper">
            <summary>
            事件Command的助手类
            </summary>
        </member>
        <member name="M:MVVMSidekick.Commands.EventCommandHelper.WithViewModel``1(``0,MVVMSidekick.ViewModels.BindableBase)">
            <summary>
            为一个事件Command制定一个VM
            </summary>
            <typeparam name="TCommand">事件Command具体类型</typeparam>
            <param name="cmd">事件Command实例</param>
            <param name="viewModel">VM实例</param>
            <returns>事件Command实例本身</returns>
        </member>
        <member name="T:MVVMSidekick.Commands.ICommandWithViewModel">
            <summary>
            带有VM的Command接口
            </summary>
        </member>
        <member name="T:MVVMSidekick.Commands.EventCommandBase">
            <summary>
            事件Command,运行后马上触发一个事件，事件中带有Command实例和VM实例属性
            </summary>
        </member>
        <member name="M:MVVMSidekick.Commands.EventCommandBase.OnCommandExecute(MVVMSidekick.Commands.EventCommandEventArgs)">
            <summary>
            执行时的逻辑
            </summary>
            <param name="args">执行时的事件数据</param>
        </member>
        <member name="M:MVVMSidekick.Commands.EventCommandBase.CanExecute(System.Object)">
            <summary>
            该Command是否能执行
            </summary>
            <param name="parameter">判断参数</param>
            <returns>是否</returns>
        </member>
        <member name="M:MVVMSidekick.Commands.EventCommandBase.OnCanExecuteChanged">
            <summary>
            是否能执行变化时触发事件的逻辑
            </summary>
        </member>
        <member name="M:MVVMSidekick.Commands.EventCommandBase.Execute(System.Object)">
            <summary>
            执行Command
            </summary>
            <param name="parameter">参数条件</param>
        </member>
        <member name="P:MVVMSidekick.Commands.EventCommandBase.ViewModel">
            <summary>
            VM
            </summary>
        </member>
        <member name="E:MVVMSidekick.Commands.EventCommandBase.CommandExecute">
            <summary>
            运行时触发的事件
            </summary>
        </member>
        <member name="E:MVVMSidekick.Commands.EventCommandBase.CanExecuteChanged">
            <summary>
            是否能执行的值产生变化的事件
            </summary>
        </member>
        <member name="T:MVVMSidekick.EventRouting.EventRouter">
            <summary>
            全局事件根
            </summary>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouter.RaiseEvent``1(System.Object,``0,System.String)">
            <summary>
            触发事件    
            </summary>
            <typeparam name="TEventArgs">事件数据类型</typeparam>
            <param name="sender">事件发送者</param>
            <param name="eventArgs">事件数据</param>
            <param name="callerMemberNameOrEventName">发送事件名</param>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouter.RaiseEvent(System.Object,System.Object,System.Type,System.String)">
            <summary>
            触发事件    
            </summary>
            <typeparam name="TEventArgs">事件数据类型</typeparam>
            <param name="sender">事件发送者</param>
            <param name="eventArgs">事件数据</param>
            <param name="callerMemberNameOrEventName">发送事件名</param>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouter.GetEventObject``1">
            <summary>
            取得独立事件类
            </summary>
            <typeparam name="TEventArgs">事件数据类型</typeparam>
            <returns>事件独立类</returns>
        </member>
        <member name="F:MVVMSidekick.EventRouting.EventRouter.EventObjects">
            <summary>
            事件来源的代理对象实例
            </summary>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouter.GetIEventObjectInstance(System.Type)">
            <summary>
            创建事件代理对象
            </summary>
            <param name="argsType">事件数据类型</param>
            <returns>代理对象实例</returns>
        </member>
        <member name="T:MVVMSidekick.EventRouting.EventRouter.IEventObject">
            <summary>
            事件对象接口
            </summary>
        </member>
        <member name="T:MVVMSidekick.EventRouting.EventRouter.EventObject`1">
             <summary>
            事件对象
             </summary>
             <typeparam name="TEventArgs"></typeparam>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouter.EventObject`1.RaiseEvent(System.Object,System.String,`0)">
            <summary>
            发起事件
            </summary>
            <param name="sender">发送者</param>
            <param name="eventName">事件名</param>
            <param name="args">参数</param>
        </member>
        <member name="T:MVVMSidekick.EventRouting.NavigateCommandEventArgs">
            <summary>
            导航事件数据
            </summary>
        </member>
        <member name="T:MVVMSidekick.EventRouting.SaveStateEventArgs">
            <summary>
            保存状态事件数据
            </summary>
        </member>
        <member name="T:MVVMSidekick.EventRouting.EventRouterHelper">
            <summary>
            事件路由的扩展方法集合
            </summary>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouterHelper.RaiseEvent``1(MVVMSidekick.ViewModels.BindableBase,``0,System.String)">
            <summary>
            触发事件
            </summary>
            <typeparam name="TEventArgs">事件类型</typeparam>
            <param name="source">事件来源</param>
            <param name="eventArgs">事件数据</param>
            <param name="callerMemberName">事件名</param>
        </member>
        <member name="T:MVVMSidekick.EventRouting.RouterEventData`1">
            <summary>
            事件信息
            </summary>
            <typeparam name="TEventArgs">事件数据类型</typeparam>
        </member>
        <member name="P:MVVMSidekick.EventRouting.RouterEventData`1.Sender">
            <summary>
            事件发送者
            </summary>
        </member>
        <member name="P:MVVMSidekick.EventRouting.RouterEventData`1.EventName">
            <summary>
            事件名
            </summary>
        </member>
        <member name="P:MVVMSidekick.EventRouting.RouterEventData`1.EventArgs">
            <summary>
            事件数据
            </summary>
        </member>
        <member name="T:MVVMSidekick.ViewModels.BindableBase`1">
            <summary>
            <para>Model type with detail subtype type paremeter.</para>
            <para>具有子类详细类型定义的model </para>
            <example>
            public class Class1:BindableBase&lt;Class1&gt;  {}
            </example>
            </summary>
            <typeparam name="TSubClassType"> Sub Type / 子类类型</typeparam>
        </member>
        <member name="T:MVVMSidekick.ViewModels.BindableBase">
            <summary>
            <para>Base type of bindable model.</para>
            <para>ViewModel 基类</para>
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.IDisposeGroup.AddDisposable(System.IDisposable,System.String,System.String,System.String,System.Int32)">
            <summary>
            增加一个一起Dispose的对象
            </summary>
            <param name="item"></param>
            <param name="comment"></param>
            <param name="member"></param>
            <param name="file"></param>
            <param name="line"></param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.IDisposeGroup.AddDisposeAction(System.Action,System.String,System.String,System.String,System.Int32)">
            <summary>
            增加一个Dispose的时候需要做的操作
            </summary>
            <param name="action"></param>
            <param name="comment"></param>
            <param name="member"></param>
            <param name="file"></param>
            <param name="line"></param>
        </member>
        <member name="F:MVVMSidekick.ViewModels.DisposeGroupBase._disposeInfoList">
            <summary>
            <para>Logic actions need to be executed when the instance is disposing</para>
            <para>销毁对象时 需要执行的操作</para>
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.DisposeGroupBase.AddDisposeAction(System.Action,System.String,System.String,System.String,System.Int32)">
            <summary>
            <para>Register logic actions need to be executed when the instance is disposing</para>
            <para>注册一个销毁对象时需要执行的操作</para>
            </summary>
            <param name="newAction">Disposing action/销毁操作</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.DisposeGroupBase.AddDisposable(System.IDisposable,System.String,System.String,System.String,System.Int32)">
            <summary>
            <para>Register an object that need to be disposed when the instance is disposing</para>
            <para>销毁对象时 需要一起销毁的对象</para>
            </summary>
            <param name="item">disposable object/需要一起销毁的对象</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.DisposeGroupBase.Dispose(System.Boolean)">
            <summary>
            <para>Do all the dispose </para>
            <para>销毁，尝试运行所有注册的销毁操作</para>
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.DisposeGroupBase.OnDisposeExceptions(System.Collections.Generic.IList{MVVMSidekick.ViewModels.DisposeEntry})">
            <summary>
            <para>If dispose actions got exceptions, will handled here. </para>
            <para>处理Dispose 时产生的Exception</para>
            </summary>
            <param name="disposeInfoWithExceptions">
            <para>The exception and dispose infomation</para>
            <para>需要处理的异常信息</para>
            </param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase.GetFieldNames">
            <summary>
            <para>Get all property names that were defined in subtype, or added objectly in runtime</para>
            <para>取得本VM实例已经定义的所有字段名。其中包括静态声明的和动态添加的。</para>
            </summary>
            <returns>String[]  Property names/字段名数组 </returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase.SetError(System.String)">
            <summary>
            <para>Sets the validate error of this model </para>
            <para>设置错误内容</para>
            </summary>
            <returns>Error string/错误内容字符串</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase.SetErrorAndTryNotify(System.String)">
            <summary>
            <para>Sets the validate error of this model and notify </para>
            <para>设置错误内容并且尝试用事件通知</para>
            </summary>
            <returns>Error string/错误内容字符串</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase.GetColumnError(System.String)">
            <summary>
            <para>Gets validate error string of this field</para>
            <para>取得对于每个字段，验证失败所产生的错误信息</para>
            </summary>
            <param name="propertyName">Property Name of error /要检查错误的属性名</param>
            <returns>Rrror string /错误字符串</returns>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableBase.IsValidationActivated">
            <summary>
            <para>Gets ot sets if the validation is activatied. This is a flag only， internal logic is not depend on this.</para>
            <para>读取/设置 此模型是否激活验证。这只是一个标记，内部逻辑并没有参考这个值</para>
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableBase.IsNotificationActivated">
            <summary>
            <para>Gets ot sets if the property change notification is activatied. </para>
            <para>读取/设置 此模型是否激活变化通知</para>
            </summary>
        </member>
        <member name="E:MVVMSidekick.ViewModels.BindableBase.PropertyChanged">
             <summary>
            <para>Event that raised when properties were changed and Notification was activited</para>
            <para> VM属性任何绑定用值被修改后,在启用通知情况下触发此事件</para>
             </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableBase.Error">
            <summary>
            <para>Gets the validate error of this model </para>
            <para>取得错误内容</para>
            </summary>
            <returns>Error string/错误内容字符串</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.ResetPropertyValue``1(MVVMSidekick.ViewModels.Property{``0})">
            <summary>
            清除值
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.CastToCurrentType(MVVMSidekick.ViewModels.BindableBase)">
            <summary>
            <para>Cast a model instance to current model subtype</para>
            <para>将一个 model 引用特化为本子类型的引用</para>
            </summary>
            <param name="model"> some bindable model/某种可绑定model</param>
            <returns>Current sub type instance/本类型引用</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.RegisterContainerLocator``1(System.String,System.Func{`0,MVVMSidekick.ViewModels.ValueContainer{``0}})">
            <summary>
            注册一个属性容器的定位器。
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="getOrCreateLocatorMethod">属性定位/创建方法 也就是定位器</param>
            <returns>注册后的定位器</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.GetValueContainer``1(System.String)">
            <summary>
            根据属性名取得一个值容器
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyName">属性名</param>
            <returns>值容器</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.GetValueContainer``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            根据表达式树取得一个值容器
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="expression">表达式树</param>
            <returns>值容器</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.GetValueContainer(System.String)">
            <summary>
            根据属性名取得一个值容器
            </summary>
            <param name="propertyName">属性名</param>
            <returns>值容器</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.GetColumnError(System.String)">
            <summary>
            获取某一属性的验证错误信息
            </summary>
            <param name="propertyName">属性名</param>
            <returns>错误信息字符串</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.GetFieldNames">
            <summary>
            获取所有属性名，包括静态声明和动态添加的
            </summary>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.Clone">
            <summary>
            创建一个VM副本
            </summary>
            <returns>新引用</returns>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableBase`1.Item(System.String)">
            <summary>
            根据索引获取属性值
            </summary>
            <param name="colName">属性名</param>
            <returns>属性值</returns>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableBase`1.EventRouter">
            <summary>
            给这个模型分配的消息路由引用（延迟加载）
            </summary>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.DoNotifyEventRouter``1(System.IObservable{``0},MVVMSidekick.EventRouting.EventRouter,System.Object,System.String)">
            <summary>
            Register a Do action to the observer, Notify the value in this sequence to EventRouter
            </summary>
            <typeparam name="T">Sequence Value Type</typeparam>
            <param name="sequence">value sequence</param>
            <param name="eventRounter"> target </param>
            <param name="source">value source</param>
            <param name="registerName">log name</param>
            <returns>same value sequence inputed</returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.DoNotifyDefaultEventRouter``1(System.IObservable{``0},System.Object,System.String)">
            <summary>
            Register a Do action to the observer, Notify the value in this sequence to EventRouter
            </summary>
            <typeparam name="T">Sequence Value Type</typeparam>
            <param name="sequence">value sequence</param>
            <param name="source">value source</param>
            <param name="registerName">log name</param>
            <returns>same value sequence inputed</returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.CreatePropertyChangedObservable(MVVMSidekick.ViewModels.BindableBase)">
            <summary>
            <para>Create a instance of IObservable that fires when property changed event is raised.</para>
            <para>创建一个监视属性变化事件观察者IObservable实例。</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.GetRouterEventObservable``1(MVVMSidekick.EventRouting.EventRouter.EventObject{``0})">
            <summary>
            转化
            </summary>
            <typeparam name="TEventArgs"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.ListenToIsUIBusy``3(MVVMSidekick.ViewModels.CommandModel{``0,``1},MVVMSidekick.ViewModels.ViewModelBase{``2},System.Boolean)">
            <summary>
            Bind Command to IsUIBusy property.
            </summary>
            <typeparam name="TCommand">A sub class of ReactiveCommand</typeparam>
            <typeparam name="TResource">The resource type of CommandModel</typeparam>
            <typeparam name="TViewModel">The View Model type command wanna bind to</typeparam>
            <param name="command">Command itself</param>
            <param name="model">The View Model  command wanna bind to</param>
            <param name="canExecuteWhenBusy">if can execute when ui busy , input true</param>
            <returns>command instance itself</returns>
        </member>
        <member name="T:MVVMSidekick.Storages.IStorage`1">
            <summary>
            <para>Simple storage interface, for persistence.</para>
            <para>简单的持久化存储类型接口</para>
            </summary>
            <typeparam name="T">
            <para>The Type needs to be save/load</para>
            <para>需要存取的类型</para>
            </typeparam>
        </member>
        <member name="M:MVVMSidekick.Storages.IStorage`1.RefreshAsync">
            <summary>
            <para>Ignore current changes, load from storage</para>
            <para>忽略当前值的变化，从持久化存储中读取</para>
            </summary>
            <returns>Async Task</returns>
        </member>
        <member name="M:MVVMSidekick.Storages.IStorage`1.SaveAsync(`0)">
            <summary>
            <para>Save current changes to storage</para>
            <para>把当前值的变化写入持久化存储中</para>
            </summary>
            <returns>Async Task</returns>
        </member>
        <member name="P:MVVMSidekick.Storages.IStorage`1.Value">
            <summary>
            <para>Current value</para>
            <para>当前值</para>
            </summary>
        </member>
        <member name="T:MVVMSidekick.Storages.IStorageHub`2">
            <summary>
            <para>Simple storage interface, for persistence.</para>
            <para>简单的持久化存储类型接口</para>
            </summary>
            <typeparam name="TToken">
            <para>The Token/token Type needs to be save/load</para>
            <para>需要存取的凭据类型</para>
            </typeparam>
            <typeparam name="TValue">
            <para>The Value Type needs to be save/load</para>
            <para>需要存取的类型</para>
            </typeparam>
        </member>
        <member name="P:MVVMSidekick.Utilities.Runtime.IsInDesignMode">
            <summary>
            <para>Gets if the code is running in design time. </para>
            <para>读取目前是否在设计时状态。</para>
            </summary>
        </member>
        <member name="T:MVVMSidekick.Utilities.CallingCodeContext">
            <summary>
            代码调用上下文
             Calling code-context
            </summary>
        </member>
        <member name="M:MVVMSidekick.Utilities.CallingCodeContext.#ctor(System.Boolean,System.String,System.String,System.String,System.Int32)">
            <summary>
            创建一个当前调用上下文数据
            </summary>
            <param name="comment">注释</param>
            <param name="caller">调用者</param>
            <param name="file">文件</param>
            <param name="line">行数</param>
        </member>
        <member name="M:MVVMSidekick.Utilities.CallingCodeContext.Create(System.String,System.String,System.String,System.Int32)">
            <summary>
            创建一个当前调用上下文数据
            </summary>
            <param name="comment">注释</param>
            <param name="caller">调用者</param>
            <param name="file">文件</param>
            <param name="line">行数</param>
            <returns>数据</returns>
        </member>
        <member name="P:MVVMSidekick.Utilities.CallingCodeContext.Comment">
            <summary>
             <para>Comment of this Calling .</para>
             <para>对此次Calling 的附加说明</para>
            </summary>
        </member>
        <member name="P:MVVMSidekick.Utilities.CallingCodeContext.Caller">
            <summary>
             <para>Caller Member Name of this Calling  registeration.</para>
             <para>此次Calling 注册的来源</para>
            </summary>
        </member>
        <member name="P:MVVMSidekick.Utilities.CallingCodeContext.File">
            <summary>
             <para>Code file path of this Calling  registeration.</para>
             <para>注册此次Calling 注册的代码文件</para>
            </summary>
        </member>
        <member name="P:MVVMSidekick.Utilities.CallingCodeContext.Line">
            <summary>
             <para>Code line number of this Calling  registeration.</para>
             <para>注册此次Calling 注册的代码行</para>
            </summary>
        </member>
        <member name="T:MVVMSidekick.Utilities.TaskExHelper">
            <summary>
            Unify Task(4.5) and TaskEx (SL5) method in this helper
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:MVVMSidekick.Utilities.TypeInfoHelper" -->
        <member name="T:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler">
            <summary> 
            Provides a task scheduler that ensures a maximum concurrency level while 
            running on top of the ThreadPool. 
            </summary> 
        </member>
        <member name="F:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler._currentThreadIsProcessingItems">
            <summary>Whether the current thread is processing work items.</summary>
        </member>
        <member name="F:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler._tasks">
            <summary>The list of tasks to be executed.</summary> 
        </member>
        <member name="F:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler._maxDegreeOfParallelism">
            <summary>The maximum concurrency level allowed by this scheduler.</summary> 
        </member>
        <member name="F:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler._delegatesQueuedOrRunning">
            <summary>Whether the scheduler is currently processing work items.</summary> 
        </member>
        <member name="M:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler.#ctor(System.Int32)">
            <summary> 
            Initializes an instance of the LimitedConcurrencyLevelTaskScheduler class with the 
            specified degree of parallelism. 
            </summary> 
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism provided by this scheduler.</param>
        </member>
        <member name="M:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary> 
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler.NotifyThreadPoolOfPendingWork">
            <summary> 
            Informs the ThreadPool that there's work to be executed for this scheduler. 
            </summary> 
        </member>
        <member name="M:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Attempts to execute the specified task on the current thread.</summary> 
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued"></param>
            <returns>Whether the task could be executed on the current thread.</returns> 
        </member>
        <member name="M:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
            <summary>Attempts to remove a previously scheduled task from the scheduler.</summary> 
            <param name="task">The task to be removed.</param>
            <returns>Whether the task could be found and removed.</returns> 
        </member>
        <member name="M:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler.GetScheduledTasks">
            <summary>Gets an enumerable of the tasks currently scheduled on this scheduler.</summary> 
            <returns>An enumerable of the tasks currently scheduled.</returns> 
        </member>
        <member name="P:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary> 
        </member>
        <member name="T:MVVMSidekick.ViewModels.ViewModel">
            <summary>
            <para>A ViewModel by default, with basic implement of name-value container.</para>
            <para>缺省的 ViewModel。可以用作最简单的字典绑定</para>
            </summary>
        </member>
        <member name="T:MVVMSidekick.ViewModels.ViewModelBase`1">
            <summary>
            一个VM,带有若干界面特性
            </summary>
            <typeparam name="TViewModel">本身的类型</typeparam>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IViewModel.IsDisposingWhenUnbindRequired">
            <summary>
            Set: Will VM be Disposed when unbind from View. 
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IViewModel.IsDisposingWhenUnloadRequired">
            <summary>
            Set: Will VM be Disposed when unload from View. 
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.OnBindedToView(MVVMSidekick.Views.IView,MVVMSidekick.ViewModels.IViewModel)">
            <summary>
            This will be invoked by view when this viewmodel is set to view's ViewModel property. 
            </summary>
            <param name="view">Set target view</param>
            <param name="oldValue">Value before set.</param>
            <returns>Task awaiter</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.OnUnbindedFromView(MVVMSidekick.Views.IView,MVVMSidekick.ViewModels.IViewModel)">
            <summary>
            This will be invoked by view when this instance of viewmodel in ViewModel property is overwritten.
            </summary>
            <param name="view">Overwrite target view.</param>
            <param name="newValue">The value replacing </param>
            <returns>Task awaiter</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.OnBindedViewLoad(MVVMSidekick.Views.IView)">
            <summary>
            This will be invoked by view when the view fires Load event and this viewmodel instance is already in view's ViewModel property
            </summary>
            <param name="view">View that firing Load event</param>
            <returns>Task awaiter</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.OnBindedViewUnload(MVVMSidekick.Views.IView)">
            <summary>
            This will be invoked by view when the view fires Unload event and this viewmodel instance is still in view's  ViewModel property
            </summary>
            <param name="view">View that firing Unload event</param>
            <returns>Task awaiter</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.LoadState(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Populates the page with content passed during navigation.  Any saved state is also
            provided when recreating a page from a prior session.
            </summary>
            <param name="navigationParameter">The parameter value passed to
            <see cref="M:Windows.UI.Xaml.Controls.Frame.Navigate(System.Type,System.Object)"/> when this page was initially requested.
            </param>
            <param name="pageState">A dictionary of state preserved by this page during an earlier
            session.  This will be null the first time a page is visited.</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.SaveState(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Preserves state associated with this page in case the application is suspended or the
            page is discarded from the navigation cache.  Values must conform to the serialization
            requirements of <see cref="!:SuspensionManager.SessionState"/>.
            </summary>
            <param name="pageState">An empty dictionary to be populated with serializable state.</param>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ViewModelBase`1.IsDisposingWhenUnbindRequired">
            <summary>
            Set: Will VM be Disposed when unbind from View. 
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ViewModelBase`1.IsDisposingWhenUnloadRequired">
            <summary>
            Set: Will VM be Disposed when unload from View. 
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ViewModelBase`1.HaveReturnValue">
            <summary>
            是否有返回值
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ViewModelBase`1.IsUIBusy">
            <summary>
            本UI是否处于忙状态
            </summary>
        </member>
        <member name="T:MVVMSidekick.ViewModels.BindableBaseExtensions">
            <summary>
            <para>Extension methods of models</para>
            <para>为Model增加的一些快捷方法</para>
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBaseExtensions.Config``1(MVVMSidekick.ViewModels.ValueContainer{``0},System.Action{MVVMSidekick.ViewModels.ValueContainer{``0}})">
            <summary>
            <para>Config Value Container with delegate</para>
            <para>使用连续的API设置ValueContainer的一些参数</para>            
            </summary>
            <typeparam name="TProperty">ValueContainer内容的类型</typeparam>
            <param name="target">ValueContainer的配置目标实例</param>
            <param name="action">配置内容</param>
            <returns>ValueContainer的配置目标实例</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBaseExtensions.DisposeWith``1(``0,MVVMSidekick.ViewModels.IDisposeGroup,System.String,System.String,System.String,System.Int32)">
            <summary>
            <para>Add Idisposeable to model's despose action list</para>
            <para>将IDisposable 对象注册到VM中的销毁对象列表。</para>
            </summary>
            <typeparam name="T">Type of Model /Model的类型</typeparam>
            <param name="item">IDisposable Inastance/IDisposable实例</param>
            <param name="vm">Model instance /Model 实例</param>
            <returns></returns>
        </member>
        <member name="T:MVVMSidekick.ViewModels.Property`1">
            <summary>
            <para>A slot to place the value container field and value container locator.</para>
            <para>属性定义。一个属性定义包括一个创建/定位属性“值容器”的静态方法引用，和一个缓存该方法执行结果“值容器”的槽位</para>
            </summary>
            <typeparam name="TProperty">Type of the property value /属性的类型</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MVVMSidekick.ViewModels.Property`1.LocateValueContainer(MVVMSidekick.ViewModels.BindableBase)" -->
        <member name="P:MVVMSidekick.ViewModels.Property`1.LocatorFunc">
            <summary>
            <para>Gets sets the factory to locate/create value container of this model instance</para>
            <para>读取/设置定位值容器用的方法。</para>
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.Property`1.Container">
            <summary>
            <para>Gets or sets Value Container, it can be recently create and cached here，by LocatorFunc </para>
            <para>读取/设置值容器,这事值容器LocatorFunc创建值容器并且缓存的位置 </para>
            </summary>
        </member>
        <member name="T:MVVMSidekick.ViewModels.ValueContainer`1">
            <summary>
            <para>Value Container, holds the value of certain field, with notifition /and compare support</para>
            <para>值容器</para>
            </summary>
            <typeparam name="TProperty">Type of the property value /属性的类型</typeparam>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ValueContainer`1.#ctor(System.String,MVVMSidekick.ViewModels.BindableBase,`0)">
            <summary>
            <para>Create a new Value Container</para>
            <para>创建属性值容器</para>
            </summary>
            <param name="model">
            <para>The model that Value Container will be held with.</para>
            <para>所属的model实例</para>
            </param>
            <param name="info">Property name/属性名</param>
            <param name="initValue">The first value of this container/初始值</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ValueContainer`1.#ctor(System.String,MVVMSidekick.ViewModels.BindableBase,System.Func{`0,`0,System.Boolean},`0)">
            <summary>
            <para>Create a new Value Container</para>
            <para>创建属性值容器</para>
            </summary>
            <param name="model">
            <para>The model that Value Container will be held with.</para>
            <para>所属的model实例</para>
            </param>
            <param name="info">Property name/属性名</param>
            <param name="equalityComparer">
            <para>Comparer of new/old value, for notifition.</para>
            <para>判断两个值是否相等的比较器,用于判断是否通知变更</para>
            </param>
            <param name="initValue">The first value of this container/初始值</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ValueContainer`1.SetValueAndTryNotify(`0)">
            <summary>
            <para>Save the value and try raise the value changed event</para>
            <para>保存值并且尝试触发更改事件</para>
            </summary>
            <param name="value">New value/属性值</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ValueContainer`1.SetValue(`0)">
            <summary>
            <para>Save the value and do not try raise the value changed event</para>
            <para>仅保存值 不尝试触发更改事件</para>
            </summary>
            <param name="value">New value/属性值</param>
        </member>
        <member name="E:MVVMSidekick.ViewModels.ValueContainer`1.ValueChanged">
            <summary>
            <para>Event that raised when value was changed</para>
            <para>值变更时触发的事件</para>
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ValueContainer`1.EqualityComparer">
            <summary>
            <para>Gets comparer instance of new/old value, for notifition.</para>
            <para>读取判断两个值是否相等的比较器,用于判断是否通知变更</para>
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ValueContainer`1.PropertyName">
            <summary>
            Property name /属性名
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ValueContainer`1.Value">
            <summary>
            Value/值 
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ValueContainer`1.Model">
            <summary>
            <para>The model instance that Value Container was held.</para>
            <para>此值容器所在的Model</para>
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ValueContainer`1.PropertyType">
            <summary>
            Gets the type of property/读取值类型
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ValueContainer`1.IsCopyToAllowed">
            <summary>
            <para>Can be copied by CopyTo method</para>
            <para>是否可以被 `Copyto` 复制到另外一个属性</para>
            </summary>
        </member>
        <member name="T:MVVMSidekick.ViewModels.ValueChangedEventArgs`1">
            <summary>
            <para>Event args that fired when property changed, with old value and new value field.</para>
            <para>值变化事件参数</para>
            </summary>
            <typeparam name="TProperty">Type of propery/变化属性的类型</typeparam>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ValueChangedEventArgs`1.#ctor(System.String,`0,`0)">
            <summary>
            Constructor of ValueChangedEventArgs
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ValueChangedEventArgs`1.NewValue">
            <summary>
            New Value
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ValueChangedEventArgs`1.OldValue">
            <summary>
            Old Value
            </summary>
        </member>
        <member name="T:MVVMSidekick.ViewModels.BindableTuple`2">
            <summary>
            <para>A Bindebale Tuple</para>
            <para>一个可绑定的Tuple实现</para>
            </summary>
            <typeparam name="TItem1">Type of first item/第一个元素的类型</typeparam>
            <typeparam name="TItem2">Type of second item/第二个元素的类型</typeparam>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableTuple`2.Item1">
            <summary>
            第一个元素
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableTuple`2.Item2">
            <summary>
            第二个元素
            </summary>
        </member>
        <member name="T:MVVMSidekick.ViewModels.BindableTuple">
            <summary>
            <para>Fast create Bindable Tuple </para>
            <para>帮助快速创建BindableTuple的帮助类</para>
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableTuple.Create``2(``0,``1)">
            <summary>
            Create a Tuple
            </summary>
        </member>
        <member name="T:MVVMSidekick.ViewModels.DisposeEntry">
            <summary>
             <para>Dispose action infomation struct</para>
             <para>注册销毁方法时的相关信息</para>
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.DisposeEntry.CallingCodeContext">
            <summary>
             <para>Code Context in this dispose action execution register .</para>
             <para>执行代码上下文</para> 
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.DisposeEntry.Exception">
            <summary>
             <para>Exception thrown in this dispose action execution .</para>
             <para>执行此次Dispose动作产生的Exception</para>
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.DisposeEntry.Action">
            <summary>
             <para>Dispose action.</para>
             <para>Dispose动作</para>
            </summary>
        </member>
        <member name="T:MVVMSidekick.ViewModels.CommandModel`2">
            <summary>
            用于封装ICommand的ViewModel。一般包括一个Command实例和对应此实例的一组资源
            </summary>
            <typeparam name="TCommand">ICommand 详细类型</typeparam>
            <typeparam name="TResource">配合Command 的资源类型</typeparam>
        </member>
        <member name="M:MVVMSidekick.ViewModels.CommandModel`2.#ctor(`0,`1)">
            <summary>
            构造器
            </summary>
            <param name="commandCore">ICommand核心</param>
            <param name="resource">初始资源</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.CommandModel`2.CanExecute(System.Object)">
            <summary>
            判断是否可执行
            </summary>
            <param name="parameter">指定参数</param>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.CommandModel`2.Execute(System.Object)">
            <summary>
            执行
            </summary>
            <param name="parameter">指定参数</param>
        </member>
        <member name="P:MVVMSidekick.ViewModels.CommandModel`2.CommandCore">
            <summary>
            ICommand核心
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.CommandModel`2.LastCanExecuteValue">
            <summary>
            上一次是否能够运行的值
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.CommandModel`2.Resource">
            <summary>
            资源
            </summary>
        </member>
        <member name="T:MVVMSidekick.ViewModels.CommandModelExtensions">
            <summary>
            可绑定的CommandVM 扩展方法集
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.CommandModelExtensions.CreateCommandModel``2(``0,``1)">
            <summary>
            根据ICommand实例创建CommandModel
            </summary>
            <typeparam name="TCommand">ICommand实例的具体类型</typeparam>
            <typeparam name="TResource">附加资源类型</typeparam>
            <param name="command">ICommand实例</param>
            <param name="resource">资源实例</param>
            <returns>CommandModel实例</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.CommandModelExtensions.CreateCommandModel``1(``0,System.Object)">
            <summary>
            据ICommand实例创建不具备/弱类型资源的CommandModel
            </summary>
            <typeparam name="TCommand">ICommand实例的具体类型</typeparam>
            <param name="command">ICommand实例</param>
            <param name="resource">资源实例</param>
            <returns>CommandModel实例</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.CommandModelExtensions.WithViewModel``2(MVVMSidekick.ViewModels.CommandModel{``0,``1},MVVMSidekick.ViewModels.BindableBase)">
            <summary>
            为CommandModel指定ViewModel
            </summary>
            <typeparam name="TCommand">ICommand实例的具体类型</typeparam>
            <typeparam name="TResource">附加资源类型</typeparam>
            <param name="cmdModel">CommandModel具体实例</param>
            <param name="viewModel">ViewModel具体实例</param>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.Views.MVVMPage.LoadState(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Populates the page with content passed during navigation.  Any saved state is also
            provided when recreating a page from a prior session.
            </summary>
            <param name="navigationParameter">The parameter value passed to
            <see cref="M:Windows.UI.Xaml.Controls.Frame.Navigate(System.Type,System.Object)"/> when this page was initially requested.
            </param>
            <param name="pageState">A dictionary of state preserved by this page during an earlier
            session.  This will be null the first time a page is visited.</param>
        </member>
        <member name="M:MVVMSidekick.Views.MVVMPage.SaveState(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Preserves state associated with this page in case the application is suspended or the
            page is discarded from the navigation cache.  Values must conform to the serialization
            requirements of <see cref="!:SuspensionManager.SessionState"/>.
            </summary>
            <param name="pageState">An empty dictionary to be populated with serializable state.</param>
        </member>
        <member name="M:MVVMSidekick.Views.MVVMControl.LoadState(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Populates the page with content passed during navigation.  Any saved state is also
            provided when recreating a page from a prior session.
            </summary>
            <param name="navigationParameter">The parameter value passed to
            <see cref="M:Windows.UI.Xaml.Controls.Frame.Navigate(System.Type,System.Object)"/> when this page was initially requested.
            </param>
            <param name="pageState">A dictionary of state preserved by this page during an earlier
            session.  This will be null the first time a page is visited.</param>
        </member>
        <member name="M:MVVMSidekick.Views.MVVMControl.SaveState(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Preserves state associated with this page in case the application is suspended or the
            page is discarded from the navigation cache.  Values must conform to the serialization
            requirements of <see cref="!:SuspensionManager.SessionState"/>.
            </summary>
            <param name="pageState">An empty dictionary to be populated with serializable state.</param>
        </member>
        <member name="T:MVVMSidekick.Views.StageManager">
            <summary>
            The abstract  for frame/contentcontrol. VM can access this class to Show other vm and vm's mapped view.
            </summary>
        </member>
        <member name="F:MVVMSidekick.Views.StageManager.NavigatorBeaconsKey">
            <summary>
            This Key is a prefix for register keys. 
            The stage registeration store the String-Element-Mapping in view's Resource Dictionary(Resource property). 
            This can help not to overwrite the resources already defined.
            </summary>
        </member>
        <member name="P:MVVMSidekick.Views.StageManager.CurrentBindingView">
            <summary>
            Get the currently binded view of this stagemanager. A stagemanager is for a certain view. If viewmodel is not binded to a view, the whole thing cannot work.
            </summary>
        </member>
    </members>
</doc>
